// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5VnySwGRBKmpnaR3N63wcy
// Component: QzvKI9zkHT
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavigationBar from "../../NavigationBar"; // plasmic-import: CDeTIfElNW/component
import Footer from "../../Footer"; // plasmic-import: i4UkpZ_8Of/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_memeland.module.css"; // plasmic-import: 5VnySwGRBKmpnaR3N63wcy/projectcss
import sty from "./PlasmicExampleTerms.module.css"; // plasmic-import: QzvKI9zkHT/css

export type PlasmicExampleTerms__VariantMembers = {};
export type PlasmicExampleTerms__VariantsArgs = {};
type VariantPropType = keyof PlasmicExampleTerms__VariantsArgs;
export const PlasmicExampleTerms__VariantProps = new Array<VariantPropType>();

export type PlasmicExampleTerms__ArgsType = {};
type ArgPropType = keyof PlasmicExampleTerms__ArgsType;
export const PlasmicExampleTerms__ArgProps = new Array<ArgPropType>();

export type PlasmicExampleTerms__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  footer?: p.Flex<typeof Footer>;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultExampleTermsProps {
  className?: string;
}

function PlasmicExampleTerms__RenderFunc(props: {
  variants: PlasmicExampleTerms__VariantsArgs;
  args: PlasmicExampleTerms__ArgsType;
  overrides: PlasmicExampleTerms__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            className={classNames("__wab_instance", sty.navigationBar)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <CmsQueryRepeater
            data-plasmic-name={"cmsDataLoader"}
            data-plasmic-override={overrides.cmsDataLoader}
            className={classNames("__wab_instance", sty.cmsDataLoader)}
            desc={false}
            emptyMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__boZY
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            filterValue={"" as const}
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0 as const}
            loadingMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r8BNz
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            noLayout={false}
            table={"demoTerms" as const}
            useDraft={false}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <CmsRowField
                      className={classNames(
                        "__wab_instance",
                        sty.cmsEntryField__zzS37
                      )}
                    />
                  </div>

                  <CmsRowField
                    className={classNames(
                      "__wab_instance",
                      sty.cmsEntryField__uWoYm
                    )}
                    field={"content" as const}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </CmsQueryRepeater>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "footer", "cmsDataLoader", "freeBox"],
  navigationBar: ["navigationBar"],
  footer: ["footer"],
  cmsDataLoader: ["cmsDataLoader", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  footer: typeof Footer;
  cmsDataLoader: typeof CmsQueryRepeater;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExampleTerms__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExampleTerms__VariantsArgs;
    args?: PlasmicExampleTerms__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExampleTerms__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExampleTerms__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicExampleTerms__ArgProps,
          internalVariantPropNames: PlasmicExampleTerms__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicExampleTerms__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExampleTerms";
  } else {
    func.displayName = `PlasmicExampleTerms.${nodeName}`;
  }
  return func;
}

export const PlasmicExampleTerms = Object.assign(
  // Top-level PlasmicExampleTerms renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    footer: makeNodeComponent("footer"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicExampleTerms
    internalVariantProps: PlasmicExampleTerms__VariantProps,
    internalArgProps: PlasmicExampleTerms__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicExampleTerms;
/* prettier-ignore-end */
